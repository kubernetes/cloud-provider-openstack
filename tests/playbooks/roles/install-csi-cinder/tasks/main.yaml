---
- name: Ensure CPO source folder
  shell:
    executable: /bin/bash
    cmd: |
      rm -rf $GOPATH/src/k8s.io/cloud-provider-openstack
      mkdir -p $GOPATH/src/k8s.io; cd $_
      git clone https://github.com/kubernetes/cloud-provider-openstack
      cd cloud-provider-openstack
      git fetch origin +refs/pull/{{ github_pr }}/merge
      git checkout FETCH_HEAD; git checkout -b PR{{ github_pr }}

- name: Build and upload cinder-csi-plugin image
  shell:
    executable: /bin/bash
    cmd: |
      cd $GOPATH/src/k8s.io/cloud-provider-openstack

      REGISTRY={{ image_registry_host }} \
      VERSION={{ github_pr }} \
      IMAGE_NAMES=cinder-csi-plugin \
      make upload-image-amd64

- name: Prepare cloud config
  shell:
    executable: /bin/bash
    cmd: |
      kubectl -n kube-system get secret cloud-config >/dev/null 2>&1
      if [ $? -eq 0 ]; then
        exit 0
      fi

      set -ex

      set +x; source {{ devstack_workdir }}/openrc admin admin > /dev/null; set -x
      tenant_id=$(openstack project show demo -c id -f value)
      set +x; source {{ devstack_workdir }}/openrc demo demo > /dev/null; set -x
      cat <<EOF > {{ ansible_user_dir }}/cloud.conf
      [Global]
      auth-url=${OS_AUTH_URL}
      username=${OS_USERNAME}
      password=${OS_PASSWORD}
      region=${OS_REGION_NAME}
      tenant-id=$tenant_id
      domain-id=default

      [BlockStorage]
      bs-version=v3
      EOF

      kubectl create secret -n kube-system generic cloud-config --from-file={{ ansible_user_dir }}/cloud.conf

- name: Replace manifests
  shell:
    executable: /bin/bash
    cmd: |
      # replace manifest cloud secret file

      b64data=`cat {{ ansible_user_dir }}/cloud.conf | base64 -w 0`
      cd $GOPATH/src/k8s.io/cloud-provider-openstack

      sed -i "/cloud\.conf/c\  cloud.conf: $b64data" manifests/cinder-csi-plugin/csi-secret-cinderplugin.yaml

      # replace image with built image
      sed -i "s#docker.io/k8scloudprovider/cinder-csi-plugin:v1.23.0#{{ remote_registry_host }}/cinder-csi-plugin-amd64:{{ github_pr }}#" manifests/cinder-csi-plugin/cinder-csi-controllerplugin.yaml

      sed -i "s#docker.io/k8scloudprovider/cinder-csi-plugin:v1.23.0#{{ remote_registry_host }}/cinder-csi-plugin-amd64:{{ github_pr }}#" manifests/cinder-csi-plugin/cinder-csi-nodeplugin.yaml

- name: Deploy openstack-cloud-controller-manager
  shell:
    executable: /bin/bash
    cmd: |
      set -x

      cat <<EOF | kubectl apply -f -
      ---
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: cloud-controller-manager
        namespace: kube-system
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: system:cloud-controller-manager
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: ServiceAccount
        name: cloud-controller-manager
        namespace: kube-system
      ---
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: openstack-cloud-controller-manager
        namespace: kube-system
        labels:
          k8s-app: openstack-cloud-controller-manager
      spec:
        replicas: 1
        selector:
          matchLabels:
            k8s-app: openstack-cloud-controller-manager
        template:
          metadata:
            labels:
              k8s-app: openstack-cloud-controller-manager
          spec:
            tolerations:
            - key: node.cloudprovider.kubernetes.io/uninitialized
              value: "true"
              effect: NoSchedule
            - key: node-role.kubernetes.io/master
              effect: NoSchedule
            serviceAccountName: cloud-controller-manager
            containers:
              - name: openstack-cloud-controller-manager
                image: docker.io/k8scloudprovider/openstack-cloud-controller-manager:v1.23.0
                args:
                  - /bin/openstack-cloud-controller-manager
                  - --cloud-config=/etc/config/cloud.conf
                  - --cloud-provider=openstack
                  - --use-service-account-credentials=true
                  - --bind-address=127.0.0.1
                volumeMounts:
                  - mountPath: /etc/config
                    name: cloud-config-volume
                    readOnly: true
            hostNetwork: true
            volumes:
            - name: cloud-config-volume
              secret:
                secretName: cloud-config
      EOF

- name: Wait for openstack-cloud-controller-manager up and running
  shell:
    executable: /bin/bash
    cmd: |
      kubectl -n kube-system get pod | grep openstack-cloud-controller-manager | grep Running
  register: check_occm
  until: check_occm.rc == 0
  retries: 24
  delay: 5

- name: Deploy cinder-csi-plugin
  shell:
    executable: /bin/bash
    cmd: |
      cd $GOPATH/src/k8s.io/cloud-provider-openstack
      kubectl apply -f manifests/cinder-csi-plugin
  ignore_errors: yes

- name: Wait for csi-cinder-controllerplugin up and running
  shell:
    executable: /bin/bash
    cmd: |
      kubectl -n kube-system get pod | grep csi-cinder-controllerplugin  | grep Running
  register: check_csi_controller
  until: check_csi_controller.rc == 0
  retries: 24
  delay: 5
  ignore_errors: yes

- name: Wait for csi-cinder-nodeplugin up and running
  shell:
    executable: /bin/bash
    cmd: |
      kubectl -n kube-system get pod | grep csi-cinder-nodeplugin  | grep Running
  register: check_csi_node
  until: check_csi_node.rc == 0
  retries: 24
  delay: 5
  ignore_errors: yes

- name: Gather additional evidence if csi-cinder-plugin failed to come up
  when: check_csi_controller.failed or check_csi_node.failed
  block:
    - name: Describe failed csi-cinder-plugin
      shell:
        executable: /bin/bash
        cmd: |
          kubectl get pods -A
          kubectl -n kube-system describe deployment csi-cinder-controllerplugin
          kubectl -n kube-system describe daemonset csi-cinder-nodeplugin
      register: describe_csi
      changed_when: false

    - name: Log failed csi-cinder-plugin deployment
      debug:
        var: describe_csi.stdout_lines

    - name: &failmsg Stop due to prior failure of csi-cinder-plugin
      fail:
        msg: *failmsg

- name: Run functional tests for csi-cinder-plugin
  shell:
    executable: /bin/bash
    cmd: |
      set -x
      set -e
      set -o pipefail

      cd $GOPATH/src/k8s.io/cloud-provider-openstack
      go test -v ./cmd/tests/cinder-csi-e2e-suite/cinder_csi_e2e_suite_test.go -ginkgo.v -ginkgo.progress -ginkgo.skip="\[Disruptive\]" -ginkgo.focus="\[cinder-csi-e2e\]" -ginkgo.noColor -timeout=0
