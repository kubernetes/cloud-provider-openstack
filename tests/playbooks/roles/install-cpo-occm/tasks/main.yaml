---
- name: Ensure CPO source folder is present
  shell:
    executable: /bin/bash
    cmd: |
      if [ ! -d "{{ ansible_user_dir }}/src/k8s.io/cloud-provider-openstack" ]; then
        echo "{{ ansible_user_dir }}/src/k8s.io/cloud-provider-openstack should exist but does not"
        exit 1
      fi

- name: Build and upload openstack-cloud-controller-manager image
  shell:
    executable: /bin/bash
    cmd: |
      cd {{ ansible_user_dir }}/src/k8s.io/cloud-provider-openstack
      VERSION="v0.0.99" # Fake version, but in proper format.

      make push-multiarch-image-openstack-cloud-controller-manager \
        ARCHS='amd64' \
        VERSION=${VERSION} \
        REGISTRY={{ image_registry_host }}

- name: Prepare openstack-cloud-controller-manager config
  shell:
    executable: /bin/bash
    cmd: |
      kubectl -n kube-system get secret cloud-config >/dev/null 2>&1
      if [ $? -eq 0 ]; then
        exit 0
      fi

      set -ex

      set +x; source {{ devstack_workdir }}/openrc admin admin > /dev/null; set -x
      tenant_id=$(openstack project show demo -c id -f value)
      sudnet_id=$(openstack subnet show private-subnet -c id -f value)
      external_network_id=$(openstack network list --external -c ID -f value)

      set +x; source {{ devstack_workdir }}/openrc demo demo > /dev/null; set -x
      cat <<EOF > {{ ansible_user_dir }}/cloud.conf
      [Global]
      auth-url=${OS_AUTH_URL}/v3
      username=${OS_USERNAME}
      password=${OS_PASSWORD}
      region=${OS_REGION_NAME}
      tenant-id=$tenant_id
      domain-id=default

      [LoadBalancer]
      subnet-id=$sudnet_id
      floating-network-id=$external_network_id
      EOF

      if [[ "{{ octavia_provider }}" != "" ]]; then
      cat <<EOF >> {{ ansible_user_dir }}/cloud.conf
      lb-provider={{ octavia_provider }}
      EOF
      fi

      if [[ "{{ octavia_provider }}" == "ovn" ]]; then
      cat <<EOF >> {{ ansible_user_dir }}/cloud.conf
      lb-method=SOURCE_IP_PORT
      EOF
      fi

      kubectl create secret -n kube-system generic cloud-config --from-file={{ ansible_user_dir }}/cloud.conf

- name: Replace manifests
  shell:
    executable: /bin/bash
    cmd: |
      VERSION="v0.0.99" # Fake version, but in proper format.

      cd {{ ansible_user_dir }}/src/k8s.io/cloud-provider-openstack
      # replace image with built image
      sed -i "s#registry.k8s.io/provider-os/openstack-cloud-controller-manager:[^'\"]\+#{{ remote_registry_host }}/openstack-cloud-controller-manager:${VERSION}#" manifests/controller-manager/openstack-cloud-controller-manager-ds.yaml
      sed -i "s#node-role.kubernetes.io/control-plane: \"\"#node-role.kubernetes.io/control-plane: \"true\"#" manifests/controller-manager/openstack-cloud-controller-manager-ds.yaml
      sed -i "s#--v=1#--v=5#" manifests/controller-manager/openstack-cloud-controller-manager-ds.yaml
      cat manifests/controller-manager/openstack-cloud-controller-manager-ds.yaml

- name: Deploy openstack-cloud-controller-manager
  shell:
    executable: /bin/bash
    cmd: |
      cd {{ ansible_user_dir }}/src/k8s.io/cloud-provider-openstack

      kubectl apply -f manifests/controller-manager/openstack-cloud-controller-manager-ds.yaml
      kubectl apply -f manifests/controller-manager/cloud-controller-manager-roles.yaml
      kubectl apply -f manifests/controller-manager/cloud-controller-manager-role-bindings.yaml
  ignore_errors: true

- name: Wait for openstack-cloud-controller-manager up and running
  shell:
    executable: /bin/bash
    cmd: |
      kubectl -n kube-system get pod | grep openstack-cloud-controller-manager | grep Running
  register: check_occm
  until: check_occm.rc == 0
  retries: 24
  delay: 5
  ignore_errors: true

- name: Gather additional evidence if openstack-cloud-controller-manager failed to come up
  when: check_occm.failed
  block:
    - name: Describe failed openstack-cloud-controller-manager
      shell:
        executable: /bin/bash
        cmd: |
          kubectl describe nodes
          kubectl get pods -n kube-system -o wide
          kubectl -n kube-system describe ds openstack-cloud-controller-manager
      register: describe_occm
      changed_when: false

    - name: Log failed openstack-cloud-controller-manager deployment
      debug:
        var: describe_occm.stdout_lines

    - name: Show openstack-cloud-controller-manager pod logs
      shell:
        executable: /bin/bash
        cmd: |
          kubectl -n kube-system logs ds/openstack-cloud-controller-manager

    - name: &failmsg Stop due to prior failure of openstack-cloud-controller-manager
      fail:
        msg: *failmsg

- name: Run functional tests for openstack-cloud-controller-manager
  when: run_e2e
  register: run_tests
  shell:
    executable: /bin/bash
    cmd: |
      cd {{ ansible_user_dir }}/src/k8s.io/cloud-provider-openstack

      # GATEWAY_IP is the default value in devstack
      GATEWAY_IP=172.24.5.1 \
      DEVSTACK_OS_RC={{ devstack_workdir }}/openrc \
      OCTAVIA_PROVIDER={{ octavia_provider }} \
      bash tests/e2e/cloudprovider/test-lb-service.sh
  timeout: 3600
  ignore_errors: true

- name: Print logs for debugging
  when:
    - run_e2e
    - run_tests.failed
  block:
  - name: Show openstack-cloud-controller-manager pod logs
    shell:
      executable: /bin/bash
      cmd: |
        kubectl -n kube-system logs daemonset/openstack-cloud-controller-manager

  - name: Show Octavia logs
    become: true
    shell:
      executable: /bin/bash
      cmd: |
        sudo journalctl -u devstack@o-api.service --no-pager

  - name: Show Neutron logs
    become: true
    shell:
      executable: /bin/bash
      cmd: |
        sudo journalctl -u devstack@q-svc.service --no-pager

  - name: &failmsg2 Stop due to prior failure of tests
    fail:
      msg: *failmsg2
