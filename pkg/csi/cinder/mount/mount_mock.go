/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package mount

import (
	mock "github.com/stretchr/testify/mock"
	"k8s.io/kubernetes/pkg/util/mount"
	"k8s.io/kubernetes/pkg/volume/util/hostutil"
)

// MountMock is an autogenerated mock type for the IMount type
// ORIGINALLY GENERATED BY mockery with hand edits
type MountMock struct {
	mock.Mock
}

// NewFakeMounter returns fake mounter instance
func NewFakeMounter() *mount.FakeMounter {
	return &mount.FakeMounter{
		MountPoints: []mount.MountPoint{},
		Log:         []mount.FakeAction{},
	}
}

// NewFakeSafeFormatAndMounter returns base Fake mounter instance
func NewFakeSafeFormatAndMounter() *mount.SafeFormatAndMount {
	return &mount.SafeFormatAndMount{
		Interface: NewFakeMounter(),
		Exec:      mount.NewFakeExec(nil),
	}
}

// FormatAndMount provides a mock function with given fields: source, target, fstype, options
func (_m *MountMock) FormatAndMount(source string, target string, fstype string, options []string) error {
	ret := _m.Called(source, target, fstype, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []string) error); ok {
		r0 = rf(source, target, fstype, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mount provides a mock function with given fields: source, target, fstype, options
func (_m *MountMock) Mount(source string, target string, fstype string, options []string) error {
	ret := _m.Called(source, target, fstype, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []string) error); ok {
		r0 = rf(source, target, fstype, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInstanceID provides a mock function with given fields:
func (_m *MountMock) GetInstanceID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsLikelyNotMountPointAttach provides a mock function with given fields: targetpath
func (_m *MountMock) IsLikelyNotMountPointAttach(targetpath string) (bool, error) {
	ret := _m.Called(targetpath)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(targetpath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(targetpath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsLikelyNotMountPointDetach provides a mock function with given fields: targetpath
func (_m *MountMock) IsLikelyNotMountPointDetach(targetpath string) (bool, error) {
	ret := _m.Called(targetpath)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(targetpath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(targetpath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanForAttach provides a mock function with given fields: devicePath
func (_m *MountMock) ScanForAttach(devicePath string) error {
	ret := _m.Called(devicePath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(devicePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDevicePath provides a mock function with given fields: volumeID
func (_m *MountMock) GetDevicePath(volumeID string) (string, error) {
	ret := _m.Called(volumeID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(volumeID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(volumeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnmountPath provides a mock function with given fields: mountPath
func (_m *MountMock) UnmountPath(mountPath string) error {
	ret := _m.Called(mountPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(mountPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBaseMounter provides a mock function
func (_m *MountMock) GetBaseMounter() *mount.SafeFormatAndMount {
	execCallback := func(cmd string, args ...string) ([]byte, error) {
		if cmd == "findmnt" {
			return []byte("devicepath"), nil
		}
		if cmd == "blkid" {
			return []byte("UUID=\"1b47881a-1563-4896-a178-eec887b759de\" \n TYPE=\"ext4\""), nil
		}
		return nil, nil
	}
	return &mount.SafeFormatAndMount{
		Interface: NewFakeMounter(),
		Exec:      mount.NewFakeExec(execCallback),
	}
}

func (_m *MountMock) GetHostUtil() hostutil.HostUtils {
	return hostutil.NewHostUtil()
}

func (m *MountMock) MakeDir(pathname string) error {
	return nil
}

// MakeFile creates an empty file
func (m *MountMock) MakeFile(pathname string) error {
	return nil
}
